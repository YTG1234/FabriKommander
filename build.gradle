plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm"
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.4.0'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

configurations {
    shade
}

shadowJar {
    configurations = [project.configurations.shade]
}

minecraft {

}

repositories {
    maven {
        name = "FabricMC"
        url = "http://maven.fabricmc.net/"
    }

    maven {
        name = "Jitpack"
        url = "https://jitpack.io/"
    }

    mavenCentral()
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

    // Config/data
    implementation "com.uchuhimo:konf:${project.konf_version}"
    implementation "com.uchuhimo:konf-toml:${project.konf_version}"

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:${project.kx_ser_version}"
    implementation "com.charleskorn.kaml:kaml:${project.kaml_version}"

    // JIJ'd deps
    shade "com.uchuhimo:konf:${project.konf_version}"
    shade "com.uchuhimo:konf-toml:${project.konf_version}"
    shade "com.charleskorn.kaml:kaml:${project.kaml_version}"
    shade "org.jetbrains.kotlinx:kotlinx-serialization-core:${project.kx_ser_version}"

    include modImplementation("com.github.P03W:Aegis:9bc74b")
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

remapJar {
    dependsOn "shadowJar"

    input.set shadowJar.archiveFile.get()
}

shadowJar {
    relocate "com.charleskorn", "me.gserv.fabrikommander.shaded.com.charleskorn"
    relocate "com.sun", "me.gserv.fabrikommander.shaded.com.sun"

    relocate "kotlin", "me.gserv.fabrikommander.shaded.kotlin"

    relocate "kotlinx.coroutines", "me.gserv.fabrikommander.shaded.kotlinx.coroutines"
    relocate "kotlinx.serialization", "me.gserv.fabrikommander.shaded.kotlinx.serialization"

    relocate "org.eclipse", "me.gserv.fabrikommander.shaded.org.eclipse"
    relocate "org.intellij", "me.gserv.fabrikommander.shaded.org.intellij"
    relocate "org.jetbrains", "me.gserv.fabrikommander.shaded.org.jetbrains"
    relocate "org.snakeyaml", "me.gserv.fabrikommander.shaded.org.snakeyaml"

    minimize {
        exclude(dependency("org.jetbrains.kotlinx:.*"))
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

compileKotlin.kotlinOptions.jvmTarget = "1.8"

